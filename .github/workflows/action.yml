name: ECS Preview (Reusable)

on:
  workflow_call:
    inputs:
      state:
        description: "upsert | teardown"
        required: true
        type: string

      # Preview identity
      preview_id:
        description: "Stable preview id (e.g., branch sanitized)"
        required: true
        type: string

      # Branch params (the point of this change)
      fe_branch:
        description: "Frontend branch to deploy"
        required: false
        type: string
      be_branch:
        description: "Backend branch to deploy"
        required: false
        type: string

      # ECR repos (full repo URIs; tag will be the branch by default)
      ecr_repo_frontend:
        required: true
        type: string
      ecr_repo_backend:
        required: true
        type: string

      # AWS/infra
      aws_region:
        required: true
        type: string
      role_to_assume:
        required: true
        type: string
      cluster_arn:
        required: true
        type: string
      alb_listener_https_arn:
        required: true
        type: string
      hosted_zone_id:
        required: true
        type: string
      domain:
        required: true
        type: string

      # Tuning
      cpu:
        default: "512"
        type: string
      memory_mib:
        default: "1024"
        type: string
      frontend_port:
        default: "80"
        type: string
      backend_port:
        default: "80"
        type: string
      api_path_prefix:
        default: "/api/*"
        type: string
      frontend_health_path:
        default: "/"
        type: string
      backend_health_path:
        default: "/healthz"
        type: string
      subnet_ids_csv:
        required: false
        type: string
      security_group_ids_csv:
        required: false
        type: string
      assign_public_ip:
        default: "ENABLED"
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      PREVIEW_ID: ${{ inputs.preview_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0

      - name: Install CDK app deps
        run: |
          pnpm install
          npx cdk --version

      - name: Resolve image tags from branches
        id: resolve
        shell: bash
        run: |
          sanitize () {
            # lowercase, replace slashes and spaces
            echo "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's#[^a-z0-9._-]+#-#g'
          }

          FE_TAG="${{ inputs.fe_tag }}"
          BE_TAG="${{ inputs.be_tag }}"

          if [ -z "$FE_TAG" ] && [ -n "${{ inputs.fe_branch }}" ]; then
            FE_TAG=$(sanitize "${{ inputs.fe_branch }}")
          fi
          if [ -z "$BE_TAG" ] && [ -n "${{ inputs.be_branch }}" ]; then
            BE_TAG=$(sanitize "${{ inputs.be_branch }}")
          fi

          # defaults if still empty: use preview_id
          if [ -z "$FE_TAG" ]; then FE_TAG=$(sanitize "${{ inputs.preview_id }}"); fi
          if [ -z "$BE_TAG" ]; then BE_TAG=$(sanitize "${{ inputs.preview_id }}"); fi

          echo "fe_tag=$FE_TAG" >> $GITHUB_OUTPUT
          echo "be_tag=$BE_TAG" >> $GITHUB_OUTPUT

      - name: (Optional) Check ECR tags exist (soft fail)
        shell: bash
        run: |
          set +e
          FE_IMAGE="${{ inputs.ecr_repo_frontend }}:${{ steps.resolve.outputs.fe_tag }}"
          BE_IMAGE="${{ inputs.ecr_repo_backend }}:${{ steps.resolve.outputs.be_tag }}"
          aws ecr describe-images --repository-name "$(echo "${{ inputs.ecr_repo_frontend }}" | awk -F/ '{print $NF}')" --image-ids imageTag="${{ steps.resolve.outputs.fe_tag }}" >/dev/null 2>&1
          FE_EXISTS=$?
          aws ecr describe-images --repository-name "$(echo "${{ inputs.ecr_repo_backend }}" | awk -F/ '{print $NF}')" --image-ids imageTag="${{ steps.resolve.outputs.be_tag }}" >/dev/null 2>&1
          BE_EXISTS=$?

          echo "FE_IMAGE=$FE_IMAGE" >> $GITHUB_ENV
          echo "BE_IMAGE=$BE_IMAGE" >> $GITHUB_ENV
          echo "FE_EXISTS=$FE_EXISTS" >> $GITHUB_ENV
          echo "BE_EXISTS=$BE_EXISTS" >> $GITHUB_ENV

      - name: Deploy (Upsert) with CDK
        if: inputs.state == 'upsert'
        run: |
          cdk deploy Preview-${{ env.PREVIEW_ID }} \
            -c previewId=${{ env.PREVIEW_ID }} \
            -c clusterArn='${{ inputs.cluster_arn }}' \
            -c albListenerArn='${{ inputs.alb_listener_https_arn }}' \
            -c hostedZoneId='${{ inputs.hosted_zone_id }}' \
            -c domain='${{ inputs.domain }}' \
            -c ecrImageFrontend='${{ env.FE_IMAGE }}' \
            -c ecrImageBackend='${{ env.BE_IMAGE }}' \
            -c cpu='${{ inputs.cpu }}' \
            -c memoryMiB='${{ inputs.memory_mib }}' \
            -c frontendPort='${{ inputs.frontend_port }}' \
            -c backendPort='${{ inputs.backend_port }}' \
            -c apiPathPrefix='${{ inputs.api_path_prefix }}' \
            -c frontendHealthPath='${{ inputs.frontend_health_path }}' \
            -c backendHealthPath='${{ inputs.backend_health_path }}' \
            -c subnetIdsCsv='${{ inputs.subnet_ids_csv }}' \
            -c securityGroupIdsCsv='${{ inputs.security_group_ids_csv }}' \
            -c assignPublicIp='${{ inputs.assign_public_ip }}' \
            --require-approval never

      - name: Destroy (Teardown) with CDK
        if: inputs.state == 'teardown'
        run: |
          npx cdk destroy Preview-${{ env.PREVIEW_ID }} --force
